generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String              @id @default(cuid())
  name                    String?
  email                   String              @unique
  emailVerified           DateTime?
  image                   String?
  role                    Role                @default(AUTHOR)
  bio                     String?
  cvUrl                   String?
  skills                  String[]
  github                  String?
  linkedin                String?
  website                 String?
  languagePref            String?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  accounts                Account[]
  noticesAuthored         Notice[]            @relation("NoticeAuthor")
  reviewsGiven            Review[]            @relation("ReviewReviewer")
  sessions                Session[]
  skillVerificationsGiven SkillVerification[] @relation("Reviewer")
  skillsVerified          SkillVerification[]
  projects                Project[]           @relation("ProjectAuthors")
  registrations           Registration[]      @relation("RegistrationMembers")
}

model SkillVerification {
  id          String   @id @default(cuid())
  userId      String
  skill       String
  reviewerId  String
  evidenceUrl String?
  date        DateTime @default(now())
  reviewer    User     @relation("Reviewer", fields: [reviewerId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Project {
  id            String       @id @default(cuid())
  slug          String       @unique
  titleES       String
  titleEN       String
  summaryES     String
  summaryEN     String
  descriptionES String
  descriptionEN String
  state         ProjectState @default(PENDING)
  stack         String[]
  tags          String[]
  repoUrl       String?
  demoUrl       String?
  images        String[]
  videoUrl      String?
  license       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  reviews       Review[]
  authors       User[]       @relation("ProjectAuthors")
}

model Review {
  id         String       @id @default(cuid())
  projectId  String
  reviewerId String
  state      ProjectState
  notes      String?
  createdAt  DateTime     @default(now())
  project    Project      @relation(fields: [projectId], references: [id])
  reviewer   User         @relation("ReviewReviewer", fields: [reviewerId], references: [id])
}

model Contest {
  id                   String         @id @default(cuid())
  slug                 String         @unique
  titleES              String
  titleEN              String
  descriptionES        String
  descriptionEN        String
  level                String
  rulesUrl             String?
  requiresDeliverables Boolean        @default(false)
  openAt               DateTime
  closeAt              DateTime
  demoDay              DateTime?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  registrations        Registration[]
}

model Registration {
  id              String   @id @default(cuid())
  contestId       String
  deliverableUrls String[]
  status          String   @default("PENDING")
  createdAt       DateTime @default(now())
  contest         Contest  @relation(fields: [contestId], references: [id])
  members         User[]   @relation("RegistrationMembers")
}

model Notice {
  id          String    @id @default(cuid())
  slug        String    @unique
  titleES     String
  titleEN     String
  contentES   String
  contentEN   String
  kind        String
  publishedAt DateTime?
  authorId    String?
  author      User?     @relation("NoticeAuthor", fields: [authorId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  REVIEWER
  ORGANIZER
  AUTHOR
  VISITOR
}

enum ProjectState {
  PENDING
  CHANGES_REQUESTED
  APPROVED
  REJECTED
  PUBLISHED
}
